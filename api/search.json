[{"id":"6bcba339e114f500588b9d1fb1d21ea3","title":"文件描述符——fd","content":"文件描述符：一个非负整数，作为索引值使用根据存储基础 — 文件描述符 fd 究竟是什么？ - 知乎 (zhihu.com) 整理 尚未完成\n如何获得打开&#x2F;创建文件时（系统调用open或creat）内核向进程返回。在关闭之前read write使用该fd找到对应文件（fd作为参数传入）\n范围posix标准中 fd 0、1、2分别对应标准输入（ STDIN_FILENO ），标准输出（ STDOUT_FILENO ），标准错误（ STDERR_FILENO）范围：0 ～ OPEN_MAX-1系统中查看方法：\n12[vivian@TualatinGaming:~]$ ulimit -n1024\n系统上进程默认最多打开 1024 个文件\n如何实现struct task_struct 是linux中关于进程的抽象封装。创建一个进程&#x3D;new 一个 struct task_struct而 struct files_struct 负责管理某个进程打开的所有文件\n1234567891011121314151617181920/* * Open file table structure */struct files_struct &#123;    // 读相关字段    atomic_t count;    bool resize_in_progress;    wait_queue_head_t resize_wait;    // 打开的文件管理结构    struct fdtable __rcu *fdt;    struct fdtable fdtab;//动态数据    // 写相关字段    unsigned int next_fd;    unsigned long close_on_exec_init[1];    unsigned long open_fds_init[1];    unsigned long full_fds_bits_init[1];    struct file * fd_array[NR_OPEN_DEFAULT];//静态数组&#125;;\n一个进程所有打开的文件结构都在一个数组里\n\nstruct file * fd_array[NR_OPEN_DEFAULT] 是一个静态数组，随着 files_struct 结构体分配出来的，在 64 位系统上，静态数组大小为 64；\nstruct fdtable 也是个数组管理结构，只不过这个是一个动态数组，数组边界是用字段描述的；大部分进程只会打开少量的文件，所以静态数组就够了，这样就不用另外分配内存。如果超过了静态数组的阈值，那么就动态扩展。[[inode]]直接索引和一级索引的优化思路\n\nfdtable 封装用来管理fd的结构体结构简化：\n12345struct fdtable &#123;    unsigned int max_fds;    struct file __rcu **fd;      /* current fd array */    //上面 **fd 为二级指针 类型为 file __rcu&#125;;\n fdtable.fd 是一个指针字段，指向的内存地址还是存储指针的（元素指针类型为 struct file * ）。换句话说，fdtable.fd 指向一个数组，数组元素为指针（指针类型为 struct file *）。 max_fds 指明数组边界。\nfd用法linux用file_struct 来管理进程所有打开的文件，内部的核心是由一个静态数组和动态数组管理结构实现。task_struct（存放所有打开的进程的结构体）找到对应的file_struct结构体（存放进程所打开文件的结构体），file_struct通过 fd 能够找到对应文件的 struct file 的结构体指针。\nfilefd是file_struct结构体中数组的索引（下标），数组元素是 struct file 结构体的指针。struct file用来表征进程打开的文件，结构简化如下：\n1234567891011121314struct file &#123;    // ...    struct path                     f_path; //文件名    struct inode                    *f_inode;     const struct file_operations    *f_op;  //当前文件偏移    atomic_long_t                    f_count;    unsigned int                     f_flags;    fmode_t                          f_mode;    struct mutex                     f_pos_lock;    loff_t                           f_pos;    struct fown_struct               f_owner;    // ...&#125;\n标识一个被进程打开的文件\nf_path ：标识文件名f_inode ：非常重要的一个字段，inode 这个是 vfs 的 inode 类型，是基于具体文件系统之上的抽象封装f_pos是当前文件偏移值，在 open 的时候会设置成默认值，seek 的时候可以更改，从而影响到 write/read 的位置\n","slug":"文件描述符——fd（未完成）","date":"2024-01-25T08:49:43.000Z","categories_index":"技术","tags_index":"C++,Linux","author_index":"贾贺"}]