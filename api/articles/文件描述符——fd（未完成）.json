{"title":"文件描述符——fd","uid":"6bcba339e114f500588b9d1fb1d21ea3","slug":"文件描述符——fd（未完成）","date":"2024-01-25T08:49:43.000Z","updated":"2024-01-25T02:25:50.190Z","comments":true,"path":"api/articles/文件描述符——fd（未完成）.json","keywords":null,"cover":null,"content":"<p>文件描述符：一个非负整数，作为索引值使用<br>根据<a href=\"https://zhuanlan.zhihu.com/p/364617329\">存储基础 — 文件描述符 fd 究竟是什么？ - 知乎 (zhihu.com)</a> 整理 尚未完成</p>\n<h3 id=\"如何获得\"><a href=\"#如何获得\" class=\"headerlink\" title=\"如何获得\"></a>如何获得</h3><p>打开&#x2F;创建文件时（系统调用open或creat）内核向进程返回。在关闭之前read write使用该fd找到对应文件（fd作为参数传入）</p>\n<h3 id=\"范围\"><a href=\"#范围\" class=\"headerlink\" title=\"范围\"></a>范围</h3><p>posix标准中 <strong>fd 0、1、2分别对应标准输入（ STDIN_FILENO ），标准输出（ STDOUT_FILENO ），标准错误（ STDERR_FILENO）</strong><br>范围：0 ～ OPEN_MAX-1<br>系统中查看方法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[vivian@TualatinGaming:~]$ ulimit -n</span><br><span class=\"line\">1024</span><br></pre></td></tr></table></figure>\n<p>系统上进程默认最多打开 1024 个文件</p>\n<h3 id=\"如何实现\"><a href=\"#如何实现\" class=\"headerlink\" title=\"如何实现\"></a>如何实现</h3><p><strong><code>struct task_struct</code></strong> 是linux中关于进程的抽象封装。创建一个进程&#x3D;<code>new</code> 一个 <code>struct task_struct</code><br>而 <strong><code>struct files_struct</code></strong> 负责管理某个进程打开的所有文件</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Open file table structure</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">files_struct</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 读相关字段</span></span><br><span class=\"line\">    <span class=\"type\">atomic_t</span> count;</span><br><span class=\"line\">    <span class=\"type\">bool</span> resize_in_progress;</span><br><span class=\"line\">    <span class=\"type\">wait_queue_head_t</span> resize_wait;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 打开的文件管理结构</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">fdtable</span> __rcu *fdt;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">fdtable</span> fdtab;<span class=\"comment\">//动态数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 写相关字段</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> next_fd;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">long</span> close_on_exec_init[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">long</span> open_fds_init[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">long</span> full_fds_bits_init[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">file</span> * fd_array[NR_OPEN_DEFAULT];<span class=\"comment\">//静态数组</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>一个进程所有打开的文件结构都在一个数组里</p>\n<ol>\n<li><code>struct file * fd_array[NR_OPEN_DEFAULT]</code> 是一个静态数组，随着 <code>files_struct</code> 结构体分配出来的，在 64 位系统上，静态数组大小为 64；</li>\n<li><code>struct fdtable</code> 也是个数组管理结构，只不过这个是一个动态数组，数组边界是用字段描述的；<br>大部分进程只会打开少量的文件，所以静态数组就够了，这样就不用另外分配内存。如果超过了静态数组的阈值，那么就动态扩展。<br>[[inode]]直接索引和一级索引的优化思路</li>\n</ol>\n<p><strong><code>fdtable</code></strong> 封装用来管理fd的结构体<br>结构简化：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">fdtable</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> max_fds;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">file</span> __rcu **fd;      <span class=\"comment\">/* current fd array */</span></span><br><span class=\"line\">    <span class=\"comment\">//上面 **fd 为二级指针 类型为 file __rcu</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p> <code>fdtable.fd</code> 是一个指针字段，指向的内存地址还是存储指针的（元素指针类型为 <code>struct file *</code> ）。换句话说，<code>fdtable.fd</code> 指向一个数组，数组元素为指针（指针类型为 <code>struct file *</code>）。<br> <code>max_fds</code> 指明数组边界。</p>\n<h3 id=\"fd用法\"><a href=\"#fd用法\" class=\"headerlink\" title=\"fd用法\"></a>fd用法</h3><p>linux用<code>file_struct</code> 来管理进程所有打开的文件，内部的核心是由一个<strong>静态数组</strong>和<strong>动态数组</strong>管理结构实现。<code>task_struct</code>（存放所有打开的进程的结构体）找到对应的<code>file_struct</code>结构体（存放进程所打开文件的结构体），<code>file_struct</code>通过 <code>fd</code> 能够找到对应文件的 <code>struct file</code> 的结构体指针。</p>\n<h3 id=\"file\"><a href=\"#file\" class=\"headerlink\" title=\"file\"></a><strong><code>file</code></strong></h3><p><code>fd</code>是<code>file_struct</code>结构体中数组的索引（下标），数组元素是 <code>struct file</code> 结构体的指针。<br><code>struct file</code>用来表征进程打开的文件，结构简化如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">file</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">path</span>                     f_path; <span class=\"comment\">//文件名</span></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">inode</span>                    *f_inode; </span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">file_operations</span>    *f_op;  <span class=\"comment\">//当前文件偏移</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">atomic_long_t</span>                    f_count;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span>                     f_flags;</span><br><span class=\"line\">    <span class=\"type\">fmode_t</span>                          f_mode;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">mutex</span>                     f_pos_lock;</span><br><span class=\"line\">    <span class=\"type\">loff_t</span>                           f_pos;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">fown_struct</span>               f_owner;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>标识一个被进程打开的文件</p>\n<p><code>f_path</code> ：标识文件名<br><code>f_inode</code> ：非常重要的一个字段，<code>inode</code> 这个是 vfs 的 <code>inode</code> 类型，是基于具体文件系统之上的抽象封装<br><code>f_pos</code>是当前文件偏移值，在 <code>open</code> 的时候会设置成默认值，<code>seek</code> 的时候可以更改，从而影响到 <code>write/read</code> 的位置</p>\n","text":"文件描述符：一个非负整数，作为索引值使用根据存储基础 — 文件描述符 fd 究竟是什么？ - 知乎 (zhihu.com) 整理 尚未完成 如何获得打开&#x2...","permalink":"/post/文件描述符——fd（未完成）","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"技术","slug":"技术","count":1,"path":"api/categories/技术.json"}],"tags":[{"name":"C++","slug":"C","count":1,"path":"api/tags/C.json"},{"name":"Linux","slug":"Linux","count":1,"path":"api/tags/Linux.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E8%8E%B7%E5%BE%97\"><span class=\"toc-text\">如何获得</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%8C%83%E5%9B%B4\"><span class=\"toc-text\">范围</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">如何实现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#fd%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">fd用法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#file\"><span class=\"toc-text\">file</span></a></li></ol>","author":{"name":"贾贺","slug":"blog-author","avatar":"/medias/avtor.jpg","link":"/","description":"<p>无业游民 野生东北大白菜</p>朝晖夕阴 气象万千","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{}}